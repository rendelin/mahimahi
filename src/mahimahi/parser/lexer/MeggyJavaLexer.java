/* The following code was generated by JFlex 1.6.1 */

package mahimahi.parser.lexer;
import mahimahi.parser.sym;
import java_cup.runtime.Symbol;
import java.io.FileInputStream;
import java.io.InputStream;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/Users/ziqingluo/App/GIT/mahimahi/grammar/MeggyJava.flex</tt>
 */
public class MeggyJavaLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\101\1\106"+
    "\3\0\1\77\1\0\1\71\1\72\1\5\1\67\1\102\1\70\1\15"+
    "\1\4\1\10\2\7\1\53\6\7\1\0\1\76\1\100\1\73\3\0"+
    "\1\23\1\36\1\16\1\22\1\26\1\54\1\35\1\31\1\41\1\6"+
    "\1\25\1\33\1\11\1\30\1\27\1\56\1\6\1\24\1\60\1\42"+
    "\1\37\1\40\1\34\1\6\1\32\1\6\1\103\1\107\1\104\3\0"+
    "\1\61\1\65\1\63\1\62\1\12\1\50\1\13\1\52\1\51\1\6"+
    "\1\64\1\20\1\105\1\45\1\17\1\46\1\6\1\21\1\55\1\44"+
    "\1\43\1\66\1\47\1\57\1\14\1\6\1\74\1\0\1\75\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff92\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\1\1\3\1\4\2\5\2\4"+
    "\1\6\14\4\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\1\1\17\1\20\1\21\1\22\1\23"+
    "\1\4\1\24\1\25\1\26\1\27\1\2\1\0\13\4"+
    "\1\30\7\4\1\31\1\32\2\4\1\33\1\34\1\35"+
    "\1\36\2\0\6\4\1\37\3\4\1\40\11\4\2\0"+
    "\1\4\1\41\2\4\1\42\1\43\7\4\1\44\1\4"+
    "\1\45\1\4\1\46\1\2\4\4\1\47\1\50\3\4"+
    "\1\51\2\4\1\0\1\4\1\52\1\53\1\54\1\55"+
    "\1\56\1\4\11\0\1\57\1\60\26\0\1\61\7\0"+
    "\1\62\5\0\1\63\1\0\1\64\2\0\1\65\20\0"+
    "\1\66\4\0\1\67\11\0\1\70\5\0\1\71\2\0"+
    "\1\72\11\0\1\73\11\0\1\74\3\0\1\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[254];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\110\0\220\0\330\0\220\0\u0120\0\220\0\u0168"+
    "\0\u01b0\0\220\0\u01f8\0\u0240\0\220\0\u0288\0\u02d0\0\u0318"+
    "\0\u0360\0\u03a8\0\u03f0\0\u0438\0\u0480\0\u04c8\0\u0510\0\u0558"+
    "\0\u05a0\0\220\0\220\0\220\0\220\0\u05e8\0\220\0\220"+
    "\0\220\0\u0630\0\220\0\220\0\220\0\220\0\220\0\u0678"+
    "\0\220\0\u06c0\0\220\0\u0708\0\u0750\0\u0798\0\u07e0\0\u0828"+
    "\0\u0870\0\u08b8\0\u0900\0\u0948\0\u0990\0\u09d8\0\u0a20\0\u0a68"+
    "\0\u0ab0\0\u0168\0\u0af8\0\u0b40\0\u0b88\0\u0bd0\0\u0c18\0\u0c60"+
    "\0\u0ca8\0\220\0\220\0\u0cf0\0\u0d38\0\220\0\220\0\220"+
    "\0\220\0\u0d80\0\u0dc8\0\u0e10\0\u0e58\0\u0ea0\0\u0ee8\0\u0f30"+
    "\0\u0f78\0\u0168\0\u0fc0\0\u1008\0\u1050\0\u0168\0\u1098\0\u10e0"+
    "\0\u1128\0\u1170\0\u11b8\0\u1200\0\u1248\0\u1290\0\u12d8\0\u1320"+
    "\0\u1368\0\u13b0\0\u0168\0\u13f8\0\u1440\0\u0168\0\u0168\0\u1488"+
    "\0\u14d0\0\u1518\0\u1560\0\u15a8\0\u15f0\0\u1638\0\u0168\0\u1680"+
    "\0\u0168\0\u16c8\0\u0168\0\u0dc8\0\u1710\0\u1758\0\u17a0\0\u17e8"+
    "\0\u0168\0\u0168\0\u1830\0\u1878\0\u18c0\0\u0168\0\u1908\0\u1950"+
    "\0\u1998\0\u19e0\0\u0168\0\u0168\0\u0168\0\u0168\0\u0168\0\u1a28"+
    "\0\u1a70\0\u1ab8\0\u1b00\0\u1b48\0\u1b90\0\u1bd8\0\u1c20\0\u1c68"+
    "\0\u1cb0\0\u0168\0\u0168\0\u1cf8\0\u1d40\0\u1d88\0\u1dd0\0\u1e18"+
    "\0\u1e60\0\u1ea8\0\u1ef0\0\u1f38\0\u1f80\0\u1fc8\0\u2010\0\u2058"+
    "\0\u20a0\0\u20e8\0\u2130\0\u2178\0\u21c0\0\u2208\0\u2250\0\u2298"+
    "\0\u22e0\0\u2328\0\u2370\0\u23b8\0\u2400\0\u2448\0\u2490\0\u24d8"+
    "\0\u2520\0\u2568\0\u25b0\0\u25f8\0\u2640\0\u2688\0\u26d0\0\220"+
    "\0\u2718\0\220\0\u2760\0\u27a8\0\u27f0\0\u2838\0\u2880\0\u28c8"+
    "\0\u2910\0\u2958\0\u29a0\0\u29e8\0\u2a30\0\u2a78\0\u2ac0\0\u2b08"+
    "\0\u2b50\0\u2b98\0\u2be0\0\u2c28\0\u2c70\0\220\0\u2cb8\0\u2d00"+
    "\0\u2d48\0\u2d90\0\220\0\u2dd8\0\u2e20\0\u2e68\0\u2eb0\0\u2ef8"+
    "\0\u2f40\0\u2f88\0\u2fd0\0\u3018\0\220\0\u3060\0\u30a8\0\u30f0"+
    "\0\u3138\0\u3180\0\220\0\u31c8\0\u3210\0\220\0\u3258\0\u32a0"+
    "\0\u32e8\0\u3330\0\u3378\0\u33c0\0\u3408\0\u3450\0\u3498\0\220"+
    "\0\u34e0\0\u3528\0\u3570\0\u35b8\0\u3600\0\u3648\0\u3690\0\u36d8"+
    "\0\u3720\0\220\0\u3768\0\u37b0\0\u37f8\0\220";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[254];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\2\10\1\15\3\10\1\16\22\10\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\10\1\11\1\10"+
    "\1\25\2\10\1\26\2\10\1\27\1\10\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\3\1\52\2\3\103\52\1\53\1\54\112\0\1\5"+
    "\111\0\1\55\1\56\110\0\7\10\1\0\51\10\16\0"+
    "\1\10\11\0\2\11\42\0\1\11\42\0\4\10\1\57"+
    "\2\10\1\0\51\10\16\0\1\10\10\0\7\10\1\0"+
    "\2\10\1\60\36\10\1\61\7\10\16\0\1\10\10\0"+
    "\4\10\1\62\2\10\1\0\51\10\16\0\1\10\10\0"+
    "\7\10\1\0\3\10\1\63\30\10\1\64\14\10\16\0"+
    "\1\10\10\0\4\10\1\65\2\10\1\0\51\10\16\0"+
    "\1\10\10\0\7\10\1\0\25\10\1\66\23\10\16\0"+
    "\1\10\10\0\7\10\1\0\34\10\1\67\14\10\16\0"+
    "\1\10\10\0\7\10\1\0\43\10\1\70\5\10\16\0"+
    "\1\10\10\0\7\10\1\0\27\10\1\71\2\10\1\72"+
    "\16\10\16\0\1\73\10\0\7\10\1\0\26\10\1\74"+
    "\22\10\16\0\1\10\10\0\7\10\1\0\26\10\1\75"+
    "\22\10\16\0\1\10\10\0\7\10\1\0\2\10\1\76"+
    "\46\10\16\0\1\10\10\0\6\10\1\77\1\0\1\10"+
    "\1\100\47\10\16\0\1\10\10\0\7\10\1\0\1\10"+
    "\1\101\47\10\16\0\1\10\75\0\1\102\113\0\1\103"+
    "\16\0\4\10\1\104\2\10\1\0\43\10\1\105\5\10"+
    "\16\0\1\10\2\0\1\52\2\0\103\52\23\0\1\106"+
    "\22\0\1\107\1\110\40\0\1\111\1\0\1\55\1\4"+
    "\1\5\105\55\5\112\1\113\102\112\6\0\5\10\1\114"+
    "\1\10\1\0\51\10\16\0\1\10\10\0\7\10\1\0"+
    "\37\10\1\115\11\10\16\0\1\10\10\0\7\10\1\0"+
    "\26\10\1\116\22\10\16\0\1\10\10\0\7\10\1\0"+
    "\26\10\1\117\22\10\16\0\1\10\10\0\7\10\1\0"+
    "\25\10\1\120\23\10\16\0\1\10\10\0\7\10\1\0"+
    "\33\10\1\121\15\10\16\0\1\10\10\0\7\10\1\0"+
    "\31\10\1\122\17\10\16\0\1\10\10\0\7\10\1\0"+
    "\47\10\1\123\1\10\16\0\1\10\10\0\7\10\1\0"+
    "\33\10\1\124\15\10\16\0\1\10\10\0\7\10\1\0"+
    "\2\10\1\125\46\10\16\0\1\10\10\0\7\10\1\0"+
    "\26\10\1\126\22\10\16\0\1\10\10\0\7\10\1\0"+
    "\30\10\1\127\20\10\16\0\1\10\10\0\7\10\1\0"+
    "\43\10\1\130\5\10\16\0\1\10\10\0\7\10\1\0"+
    "\3\10\1\131\45\10\16\0\1\10\10\0\7\10\1\0"+
    "\43\10\1\132\5\10\16\0\1\10\10\0\7\10\1\0"+
    "\26\10\1\133\22\10\16\0\1\10\10\0\7\10\1\0"+
    "\1\10\1\134\47\10\16\0\1\10\10\0\7\10\1\0"+
    "\33\10\1\135\15\10\16\0\1\10\10\0\5\10\1\136"+
    "\1\10\1\0\51\10\16\0\1\10\10\0\7\10\1\0"+
    "\33\10\1\137\15\10\16\0\1\10\2\0\5\112\1\140"+
    "\102\112\5\113\1\141\102\113\6\0\5\10\1\142\1\10"+
    "\1\0\51\10\16\0\1\10\10\0\4\10\1\143\2\10"+
    "\1\0\51\10\16\0\1\10\10\0\4\10\1\144\2\10"+
    "\1\0\51\10\16\0\1\10\10\0\7\10\1\0\25\10"+
    "\1\145\23\10\16\0\1\10\10\0\4\10\1\146\2\10"+
    "\1\0\51\10\16\0\1\10\10\0\7\10\1\0\37\10"+
    "\1\147\11\10\16\0\1\10\10\0\7\10\1\0\2\10"+
    "\1\150\46\10\16\0\1\10\10\0\7\10\1\0\2\10"+
    "\1\151\46\10\16\0\1\10\10\0\7\10\1\0\37\10"+
    "\1\152\11\10\16\0\1\10\10\0\7\10\1\0\1\10"+
    "\1\153\47\10\16\0\1\10\10\0\7\10\1\0\26\10"+
    "\1\154\22\10\16\0\1\10\10\0\7\10\1\0\33\10"+
    "\1\155\15\10\16\0\1\10\10\0\7\10\1\0\37\10"+
    "\1\156\11\10\16\0\1\10\10\0\4\10\1\157\2\10"+
    "\1\0\51\10\16\0\1\10\10\0\7\10\1\0\2\10"+
    "\1\160\46\10\16\0\1\10\10\0\7\10\1\0\44\10"+
    "\1\161\4\10\16\0\1\10\10\0\5\10\1\162\1\10"+
    "\1\0\51\10\16\0\1\10\10\0\7\10\1\0\27\10"+
    "\1\163\21\10\16\0\1\10\2\0\4\112\1\5\1\140"+
    "\102\112\4\113\1\164\1\141\102\113\6\0\6\10\1\165"+
    "\1\0\51\10\16\0\1\10\10\0\7\10\1\0\27\10"+
    "\1\166\21\10\16\0\1\10\10\0\7\10\1\0\3\10"+
    "\1\167\45\10\16\0\1\10\10\0\7\10\1\0\33\10"+
    "\1\170\15\10\16\0\1\10\10\0\4\10\1\171\2\10"+
    "\1\0\51\10\16\0\1\10\10\0\4\10\1\172\2\10"+
    "\1\0\51\10\16\0\1\10\10\0\7\10\1\0\3\10"+
    "\1\173\45\10\16\0\1\10\10\0\7\10\1\0\33\10"+
    "\1\174\15\10\16\0\1\10\10\0\7\10\1\0\27\10"+
    "\1\175\21\10\16\0\1\10\10\0\7\10\1\0\37\10"+
    "\1\176\11\10\16\0\1\10\10\0\4\10\1\177\2\10"+
    "\1\0\51\10\16\0\1\10\10\0\6\10\1\200\1\0"+
    "\51\10\16\0\1\10\10\0\7\10\1\201\51\10\16\0"+
    "\1\10\10\0\7\10\1\0\44\10\1\202\4\10\16\0"+
    "\1\10\10\0\7\10\1\0\27\10\1\203\21\10\16\0"+
    "\1\10\10\0\7\10\1\0\45\10\1\204\3\10\16\0"+
    "\1\10\10\0\7\10\1\0\26\10\1\205\22\10\16\0"+
    "\1\10\10\0\7\10\1\0\45\10\1\206\3\10\16\0"+
    "\1\10\10\0\5\10\1\207\1\10\1\0\51\10\16\0"+
    "\1\10\10\0\7\10\1\0\43\10\1\210\5\10\16\0"+
    "\1\10\10\0\7\10\1\211\51\10\16\0\1\10\15\0"+
    "\1\212\2\0\1\213\17\0\1\214\3\0\1\215\1\0"+
    "\1\216\10\0\1\217\4\0\1\220\1\221\32\0\7\10"+
    "\1\0\37\10\1\222\11\10\16\0\1\10\10\0\7\10"+
    "\1\0\27\10\1\223\21\10\16\0\1\10\13\0\1\224"+
    "\110\0\1\225\114\0\1\226\133\0\1\227\63\0\1\230"+
    "\107\0\1\231\102\0\1\232\107\0\1\233\147\0\1\234"+
    "\47\0\1\235\141\0\1\236\63\0\1\237\133\0\1\240"+
    "\110\0\1\241\107\0\1\242\106\0\1\243\63\0\1\244"+
    "\101\0\1\245\110\0\1\246\152\0\1\247\50\0\1\250"+
    "\134\0\1\251\55\0\1\252\107\0\1\253\120\0\1\254"+
    "\32\0\1\255\112\0\1\256\111\0\1\257\37\0\1\260"+
    "\145\0\1\261\57\0\1\262\105\0\1\263\105\0\1\264"+
    "\152\0\1\265\72\0\1\266\115\0\1\267\52\0\1\270"+
    "\157\0\1\271\37\0\1\272\152\0\1\273\45\0\1\274"+
    "\137\0\1\275\60\0\1\276\3\0\2\276\2\0\1\277"+
    "\6\0\1\276\1\277\15\0\1\276\77\0\1\300\122\0"+
    "\1\301\107\0\1\302\66\0\1\303\63\0\1\304\117\0"+
    "\1\305\1\0\1\306\2\0\1\307\2\0\1\310\1\0"+
    "\1\311\1\312\1\313\1\0\1\314\64\0\1\315\145\0"+
    "\1\316\1\0\1\277\105\0\1\316\115\0\1\317\61\0"+
    "\1\320\66\0\1\321\140\0\1\322\64\0\1\323\112\0"+
    "\1\324\112\0\1\325\105\0\1\326\111\0\1\327\112\0"+
    "\1\330\102\0\1\331\116\0\1\332\115\0\1\333\70\0"+
    "\1\334\1\335\1\336\6\0\1\337\2\0\1\335\1\340"+
    "\71\0\1\341\114\0\1\342\101\0\1\343\133\0\1\344"+
    "\67\0\1\345\105\0\1\346\110\0\1\347\117\0\1\350"+
    "\115\0\1\351\74\0\1\352\120\0\1\353\77\0\1\354"+
    "\77\0\1\355\141\0\1\356\50\0\1\357\143\0\1\335"+
    "\105\0\1\360\65\0\1\361\131\0\1\362\70\0\1\346"+
    "\112\0\1\363\112\0\1\364\116\0\1\353\73\0\1\365"+
    "\107\0\1\346\114\0\1\366\123\0\1\367\53\0\1\370"+
    "\144\0\1\371\114\0\1\372\51\0\1\373\121\0\1\353"+
    "\105\0\1\374\110\0\1\346\105\0\1\375\126\0\1\335"+
    "\114\0\1\371\101\0\1\335\110\0\1\376\76\0\1\346"+
    "\115\0\1\346\45\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14400];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\1\1\1\11\2\1\1\11"+
    "\2\1\1\11\14\1\4\11\1\1\3\11\1\1\5\11"+
    "\1\1\1\11\1\1\1\11\2\1\1\0\23\1\2\11"+
    "\2\1\4\11\2\0\24\1\2\0\37\1\1\0\7\1"+
    "\11\0\2\1\26\0\1\1\7\0\1\1\5\0\1\11"+
    "\1\0\1\11\2\0\1\1\20\0\1\11\4\0\1\11"+
    "\11\0\1\11\5\0\1\11\2\0\1\11\11\0\1\11"+
    "\11\0\1\11\3\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[254];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuffer string = new StringBuffer();
  
  private Symbol symbol(int type) {
    SymbolValue value = new SymbolValue(yyline, yycolumn, yytext());

    return new Symbol(type, yyline, yycolumn, value);
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }

  private SymbolValue symVal(String name, int value) {
    return new SymbolValue(yyline, yycolumn, name, value);
  }

  private SymbolValue symVal(String name) {
    return new SymbolValue(yyline, yycolumn, name);
  }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MeggyJavaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 212) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {   return new Symbol(sym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new Error("Illegal character <" + yytext() + ">");
            }
          case 62: break;
          case 2: 
            { 
            }
          case 63: break;
          case 3: 
            { return symbol(sym.TIMES);
            }
          case 64: break;
          case 4: 
            { return symbol(sym.IDENTIFIER);
            }
          case 65: break;
          case 5: 
            { return symbol(sym.INT_LITERAL);
            }
          case 66: break;
          case 6: 
            { return symbol(sym.DOT);
            }
          case 67: break;
          case 7: 
            { return symbol(sym.PLUS);
            }
          case 68: break;
          case 8: 
            { return symbol(sym.MINUS);
            }
          case 69: break;
          case 9: 
            { return symbol(sym.LPAREN);
            }
          case 70: break;
          case 10: 
            { return symbol(sym.RPAREN);
            }
          case 71: break;
          case 11: 
            { return symbol(sym.ASSIGN);
            }
          case 72: break;
          case 12: 
            { return symbol(sym.LBRACE);
            }
          case 73: break;
          case 13: 
            { return symbol(sym.RBRACE);
            }
          case 74: break;
          case 14: 
            { return symbol(sym.SEMI);
            }
          case 75: break;
          case 15: 
            { return symbol(sym.LT);
            }
          case 76: break;
          case 16: 
            { return symbol(sym.NOT);
            }
          case 77: break;
          case 17: 
            { return symbol(sym.COMMA);
            }
          case 78: break;
          case 18: 
            { return symbol(sym.LBRACKET);
            }
          case 79: break;
          case 19: 
            { return symbol(sym.RBRACKET);
            }
          case 80: break;
          case 20: 
            { string.setLength(0); yybegin(STRING);
            }
          case 81: break;
          case 21: 
            { string.append( yytext());
            }
          case 82: break;
          case 22: 
            { yybegin(YYINITIAL); return symbol(sym.STRING_LITERAL, string.toString());
            }
          case 83: break;
          case 23: 
            { string.append('\\');
            }
          case 84: break;
          case 24: 
            { return symbol(sym.IF);
            }
          case 85: break;
          case 25: 
            { return symbol(sym.EQUAL);
            }
          case 86: break;
          case 26: 
            { return symbol(sym.AND);
            }
          case 87: break;
          case 27: 
            { string.append('\r');
            }
          case 88: break;
          case 28: 
            { string.append('\t');
            }
          case 89: break;
          case 29: 
            { string.append('\n');
            }
          case 90: break;
          case 30: 
            { string.append('\"');
            }
          case 91: break;
          case 31: 
            { return symbol(sym.NEW);
            }
          case 92: break;
          case 32: 
            { return symbol(sym.INT);
            }
          case 93: break;
          case 33: 
            { return symbol(sym.ELSE);
            }
          case 94: break;
          case 34: 
            { return symbol(sym.TRUE);
            }
          case 95: break;
          case 35: 
            { return symbol(sym.THIS);
            }
          case 96: break;
          case 36: 
            { return symbol(sym.BYTE);
            }
          case 97: break;
          case 37: 
            { return symbol(sym.VOID);
            }
          case 98: break;
          case 38: 
            { return symbol(sym.MAIN);
            }
          case 99: break;
          case 39: 
            { return symbol(sym.WHILE);
            }
          case 100: break;
          case 40: 
            { return symbol(sym.FALSE);
            }
          case 101: break;
          case 41: 
            { return symbol(sym.CLASS);
            }
          case 102: break;
          case 42: 
            { return symbol(sym.RETURN);
            }
          case 103: break;
          case 43: 
            { return symbol(sym.PUBLIC);
            }
          case 104: break;
          case 44: 
            { return symbol(sym.IMPORT);
            }
          case 105: break;
          case 45: 
            { return symbol(sym.STATIC);
            }
          case 106: break;
          case 46: 
            { return symbol(sym.STRING_TYPE);
            }
          case 107: break;
          case 47: 
            { return symbol(sym.EXTENDS);
            }
          case 108: break;
          case 48: 
            { return symbol(sym.BOOLEAN);
            }
          case 109: break;
          case 49: 
            { return symbol(sym.TONE);
            }
          case 110: break;
          case 50: 
            { return symbol(sym.COLOR);
            }
          case 111: break;
          case 51: 
            { return symbol(sym.MEGGYDELAY);
            }
          case 112: break;
          case 52: 
            { return symbol(sym.MEGGY);
            }
          case 113: break;
          case 53: 
            { return symbol(sym.BUTTON);
            }
          case 114: break;
          case 54: 
            { return symbol(sym.TONE_LITERAL);
            }
          case 115: break;
          case 55: 
            { return symbol(sym.MEGGYGETPIXEL);
            }
          case 116: break;
          case 56: 
            { return symbol(sym.BUTTON_LITERAL);
            }
          case 117: break;
          case 57: 
            { return symbol(sym.MEGGYSETPIXEL);
            }
          case 118: break;
          case 58: 
            { return symbol(sym.COLOR_LITERAL);
            }
          case 119: break;
          case 59: 
            { return symbol(sym.MEGGYTONESTART);
            }
          case 120: break;
          case 60: 
            { return symbol(sym.MEGGYSETAUXLEDS);
            }
          case 121: break;
          case 61: 
            { return symbol(sym.MEGGYCHECKBUTTON);
            }
          case 122: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
