/* The following code was generated by JFlex 1.4.3 on 9/28/15 11:47 AM */

package MeggyJava
import java_cup.runtime.Symbol;
import java.io.FileInputStream;
import java.io.InputStream;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 9/28/15 11:47 AM from the specification file
 * <tt>lexer/MeggyJava.flex</tt>
 */
class MeggyJavaLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\1\72"+
    "\1\110\1\0\1\7\1\0\1\70\1\0\1\62\1\63\1\5\1\60"+
    "\1\73\1\61\1\17\1\4\1\11\2\12\1\55\6\12\1\6\1\67"+
    "\1\71\1\64\3\0\1\25\1\40\1\20\1\24\1\30\1\56\1\37"+
    "\1\33\1\43\1\7\1\27\1\35\1\13\1\32\1\31\1\106\1\7"+
    "\1\26\1\100\1\44\1\41\1\42\1\36\1\7\1\34\1\7\1\74"+
    "\1\111\1\75\1\0\1\7\1\0\1\77\1\76\1\104\1\102\1\14"+
    "\1\52\1\15\1\54\1\53\1\10\1\107\1\22\1\103\1\47\1\21"+
    "\1\50\1\7\1\23\1\57\1\46\1\45\1\101\1\51\1\105\1\16"+
    "\1\7\1\65\1\0\1\66\1\0\41\7\2\0\4\7\4\0\1\7"+
    "\2\0\1\7\7\0\1\7\4\0\1\7\5\0\27\7\1\0\37\7"+
    "\1\0\u01ca\7\4\0\14\7\16\0\5\7\7\0\1\7\1\0\1\7"+
    "\21\0\165\7\1\0\2\7\2\0\4\7\10\0\1\7\1\0\3\7"+
    "\1\0\1\7\1\0\24\7\1\0\123\7\1\0\213\7\1\0\5\7"+
    "\2\0\236\7\11\0\46\7\2\0\1\7\7\0\47\7\11\0\55\7"+
    "\1\0\1\7\1\0\2\7\1\0\2\7\1\0\1\7\10\0\33\7"+
    "\5\0\3\7\15\0\4\7\7\0\1\7\4\0\13\7\5\0\112\7"+
    "\4\0\146\7\1\0\11\7\1\0\12\7\1\0\23\7\2\0\1\7"+
    "\17\0\74\7\2\0\145\7\16\0\66\7\4\0\1\7\5\0\56\7"+
    "\22\0\34\7\244\0\144\7\2\0\12\7\1\0\7\7\1\0\7\7"+
    "\1\0\3\7\1\0\10\7\2\0\2\7\2\0\26\7\1\0\7\7"+
    "\1\0\1\7\3\0\4\7\2\0\11\7\2\0\2\7\2\0\4\7"+
    "\10\0\1\7\4\0\2\7\1\0\5\7\2\0\16\7\7\0\1\7"+
    "\5\0\3\7\1\0\6\7\4\0\2\7\2\0\26\7\1\0\7\7"+
    "\1\0\2\7\1\0\2\7\1\0\2\7\2\0\1\7\1\0\5\7"+
    "\4\0\2\7\2\0\3\7\3\0\1\7\7\0\4\7\1\0\1\7"+
    "\7\0\20\7\13\0\3\7\1\0\11\7\1\0\3\7\1\0\26\7"+
    "\1\0\7\7\1\0\2\7\1\0\5\7\2\0\12\7\1\0\3\7"+
    "\1\0\3\7\2\0\1\7\17\0\4\7\2\0\12\7\1\0\1\7"+
    "\17\0\3\7\1\0\10\7\2\0\2\7\2\0\26\7\1\0\7\7"+
    "\1\0\2\7\1\0\5\7\2\0\11\7\2\0\2\7\2\0\3\7"+
    "\10\0\2\7\4\0\2\7\1\0\5\7\2\0\12\7\1\0\1\7"+
    "\20\0\2\7\1\0\6\7\3\0\3\7\1\0\4\7\3\0\2\7"+
    "\1\0\1\7\1\0\2\7\3\0\2\7\3\0\3\7\3\0\14\7"+
    "\4\0\5\7\3\0\3\7\1\0\4\7\2\0\1\7\6\0\1\7"+
    "\16\0\12\7\11\0\1\7\7\0\3\7\1\0\10\7\1\0\3\7"+
    "\1\0\27\7\1\0\12\7\1\0\5\7\3\0\10\7\1\0\3\7"+
    "\1\0\4\7\7\0\2\7\1\0\2\7\6\0\4\7\2\0\12\7"+
    "\22\0\2\7\1\0\10\7\1\0\3\7\1\0\27\7\1\0\12\7"+
    "\1\0\5\7\2\0\11\7\1\0\3\7\1\0\4\7\7\0\2\7"+
    "\7\0\1\7\1\0\4\7\2\0\12\7\1\0\2\7\17\0\2\7"+
    "\1\0\10\7\1\0\3\7\1\0\51\7\2\0\10\7\1\0\3\7"+
    "\1\0\5\7\10\0\1\7\10\0\4\7\2\0\12\7\12\0\6\7"+
    "\2\0\2\7\1\0\22\7\3\0\30\7\1\0\11\7\1\0\1\7"+
    "\2\0\7\7\3\0\1\7\4\0\6\7\1\0\1\7\1\0\10\7"+
    "\22\0\2\7\15\0\72\7\4\0\20\7\1\0\12\7\47\0\2\7"+
    "\1\0\1\7\2\0\2\7\1\0\1\7\2\0\1\7\6\0\4\7"+
    "\1\0\7\7\1\0\3\7\1\0\1\7\1\0\1\7\2\0\2\7"+
    "\1\0\15\7\1\0\3\7\2\0\5\7\1\0\1\7\1\0\6\7"+
    "\2\0\12\7\2\0\2\7\42\0\1\7\27\0\2\7\6\0\12\7"+
    "\13\0\1\7\1\0\1\7\1\0\1\7\4\0\12\7\1\0\44\7"+
    "\4\0\24\7\1\0\22\7\1\0\44\7\11\0\1\7\71\0\112\7"+
    "\6\0\116\7\2\0\46\7\12\0\53\7\1\0\1\7\3\0\u0149\7"+
    "\1\0\4\7\2\0\7\7\1\0\1\7\1\0\4\7\2\0\51\7"+
    "\1\0\4\7\2\0\41\7\1\0\4\7\2\0\7\7\1\0\1\7"+
    "\1\0\4\7\2\0\17\7\1\0\71\7\1\0\4\7\2\0\103\7"+
    "\2\0\3\7\40\0\20\7\20\0\125\7\14\0\u026c\7\2\0\21\7"+
    "\1\0\32\7\5\0\113\7\3\0\3\7\17\0\15\7\1\0\7\7"+
    "\13\0\25\7\13\0\24\7\14\0\15\7\1\0\3\7\1\0\2\7"+
    "\14\0\124\7\3\0\1\7\3\0\3\7\2\0\12\7\41\0\3\7"+
    "\2\0\12\7\6\0\130\7\10\0\53\7\5\0\106\7\12\0\35\7"+
    "\3\0\14\7\4\0\14\7\12\0\50\7\2\0\5\7\13\0\54\7"+
    "\4\0\32\7\6\0\12\7\46\0\34\7\4\0\77\7\1\0\35\7"+
    "\2\0\13\7\6\0\12\7\15\0\1\7\130\0\114\7\4\0\12\7"+
    "\21\0\11\7\14\0\53\7\3\0\14\7\6\0\64\7\14\0\70\7"+
    "\10\0\12\7\3\0\61\7\122\0\3\7\1\0\37\7\15\0\347\7"+
    "\25\0\u011a\7\2\0\6\7\2\0\46\7\2\0\6\7\2\0\10\7"+
    "\1\0\1\7\1\0\1\7\1\0\1\7\1\0\37\7\2\0\65\7"+
    "\1\0\7\7\1\0\1\7\3\0\3\7\1\0\7\7\3\0\4\7"+
    "\2\0\6\7\4\0\15\7\5\0\3\7\1\0\7\7\16\0\5\7"+
    "\32\0\5\7\20\0\2\7\23\0\1\7\13\0\5\7\5\0\6\7"+
    "\1\0\1\7\15\0\1\7\20\0\15\7\3\0\32\7\26\0\15\7"+
    "\4\0\1\7\3\0\14\7\21\0\1\7\4\0\1\7\2\0\12\7"+
    "\1\0\1\7\3\0\5\7\6\0\1\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\1\0\13\7\2\0\4\7\5\0\5\7\4\0\1\7"+
    "\21\0\51\7\u0a77\0\57\7\1\0\57\7\1\0\205\7\6\0\7\7"+
    "\16\0\46\7\12\0\66\7\11\0\1\7\17\0\30\7\11\0\7\7"+
    "\1\0\7\7\1\0\7\7\1\0\7\7\1\0\7\7\1\0\7\7"+
    "\1\0\7\7\1\0\7\7\1\0\40\7\57\0\1\7\u01d5\0\3\7"+
    "\31\0\17\7\1\0\5\7\2\0\5\7\4\0\126\7\2\0\2\7"+
    "\2\0\3\7\1\0\132\7\1\0\4\7\5\0\51\7\3\0\136\7"+
    "\21\0\33\7\65\0\20\7\u0200\0\u19b6\7\112\0\u51cc\7\64\0\u048d\7"+
    "\103\0\56\7\2\0\u010d\7\3\0\34\7\24\0\60\7\14\0\2\7"+
    "\1\0\31\7\10\0\122\7\45\0\11\7\2\0\147\7\2\0\4\7"+
    "\1\0\2\7\16\0\12\7\120\0\56\7\20\0\1\7\7\0\64\7"+
    "\14\0\105\7\13\0\12\7\6\0\30\7\3\0\1\7\4\0\56\7"+
    "\2\0\44\7\14\0\35\7\3\0\101\7\16\0\13\7\46\0\67\7"+
    "\11\0\16\7\2\0\12\7\6\0\27\7\3\0\2\7\4\0\103\7"+
    "\30\0\3\7\43\0\6\7\2\0\6\7\2\0\6\7\11\0\7\7"+
    "\1\0\7\7\221\0\53\7\1\0\2\7\2\0\12\7\6\0\u2ba4\7"+
    "\14\0\27\7\4\0\61\7\u2104\0\u012e\7\2\0\76\7\2\0\152\7"+
    "\46\0\7\7\14\0\5\7\5\0\14\7\1\0\15\7\1\0\5\7"+
    "\1\0\1\7\1\0\2\7\1\0\2\7\1\0\154\7\41\0\u016b\7"+
    "\22\0\100\7\2\0\66\7\50\0\15\7\3\0\20\7\20\0\7\7"+
    "\14\0\2\7\30\0\3\7\31\0\1\7\6\0\5\7\1\0\207\7"+
    "\2\0\1\7\4\0\1\7\13\0\12\7\7\0\32\7\4\0\1\7"+
    "\1\0\32\7\13\0\131\7\3\0\6\7\2\0\6\7\2\0\6\7"+
    "\2\0\3\7\3\0\2\7\3\0\2\7\22\0\3\7\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\1\1\3\1\4\2\5\1\1"+
    "\1\4\1\6\2\4\6\1\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\1\1\17\1\20\1\21"+
    "\1\22\1\23\5\1\1\24\1\25\1\26\1\27\1\2"+
    "\2\0\5\4\5\0\1\30\2\0\1\31\1\32\7\0"+
    "\1\33\1\34\1\35\1\36\3\0\5\4\1\37\3\0"+
    "\1\40\14\0\1\41\2\4\1\42\1\43\5\0\1\44"+
    "\2\0\1\45\1\0\1\46\1\0\1\2\1\0\2\4"+
    "\1\0\1\47\1\50\5\0\1\51\1\0\1\4\1\52"+
    "\1\53\1\54\1\55\1\0\1\56\11\0\1\57\1\60"+
    "\26\0\1\61\7\0\1\62\5\0\1\63\1\0\1\64"+
    "\2\0\1\65\20\0\1\66\4\0\1\67\11\0\1\70"+
    "\5\0\1\71\2\0\1\72\11\0\1\73\11\0\1\74"+
    "\3\0\1\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[254];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\112\0\224\0\336\0\224\0\u0128\0\224\0\u0172"+
    "\0\224\0\u01bc\0\u0206\0\u0250\0\224\0\u029a\0\u02e4\0\u032e"+
    "\0\u0378\0\u03c2\0\u040c\0\u0456\0\u04a0\0\224\0\224\0\224"+
    "\0\224\0\u04ea\0\224\0\224\0\224\0\u0534\0\224\0\224"+
    "\0\224\0\224\0\224\0\u057e\0\u05c8\0\u0612\0\u065c\0\u06a6"+
    "\0\224\0\u06f0\0\224\0\u073a\0\u0784\0\u07ce\0\u0818\0\u0862"+
    "\0\u08ac\0\u08f6\0\u0940\0\u098a\0\u09d4\0\u0a1e\0\u0a68\0\u0ab2"+
    "\0\u0afc\0\224\0\u0b46\0\u0b90\0\224\0\224\0\u0bda\0\u0c24"+
    "\0\u0c6e\0\u0cb8\0\u0d02\0\u0d4c\0\u0d96\0\224\0\224\0\224"+
    "\0\224\0\u0de0\0\u0e2a\0\u0e74\0\u0ebe\0\u0f08\0\u0f52\0\u0f9c"+
    "\0\u0fe6\0\224\0\u1030\0\u107a\0\u10c4\0\224\0\u110e\0\u1158"+
    "\0\u11a2\0\u11ec\0\u1236\0\u1280\0\u12ca\0\u1314\0\u135e\0\u13a8"+
    "\0\u13f2\0\u143c\0\u0172\0\u1486\0\u14d0\0\u0172\0\u0172\0\u151a"+
    "\0\u1564\0\u15ae\0\u15f8\0\u1642\0\224\0\u168c\0\u16d6\0\224"+
    "\0\u1720\0\224\0\u176a\0\u0e2a\0\u17b4\0\u17fe\0\u1848\0\u1892"+
    "\0\224\0\224\0\u18dc\0\u1926\0\u1970\0\u19ba\0\u1a04\0\224"+
    "\0\u1a4e\0\u1a98\0\u0172\0\224\0\224\0\224\0\u1ae2\0\224"+
    "\0\u1b2c\0\u1b76\0\u1bc0\0\u1c0a\0\u1c54\0\u1c9e\0\u1ce8\0\u1d32"+
    "\0\u1d7c\0\u0172\0\224\0\u1dc6\0\u1e10\0\u1e5a\0\u1ea4\0\u1eee"+
    "\0\u1f38\0\u1f82\0\u1fcc\0\u2016\0\u2060\0\u20aa\0\u20f4\0\u213e"+
    "\0\u2188\0\u21d2\0\u221c\0\u2266\0\u22b0\0\u22fa\0\u2344\0\u238e"+
    "\0\u23d8\0\u2422\0\u246c\0\u24b6\0\u2500\0\u254a\0\u2594\0\u25de"+
    "\0\u2628\0\u2672\0\u26bc\0\u2706\0\u2750\0\u279a\0\u27e4\0\224"+
    "\0\u282e\0\224\0\u2878\0\u28c2\0\u290c\0\u2956\0\u29a0\0\u29ea"+
    "\0\u2a34\0\u2a7e\0\u2ac8\0\u2b12\0\u2b5c\0\u2ba6\0\u2bf0\0\u2c3a"+
    "\0\u2c84\0\u2cce\0\u2d18\0\u2d62\0\u2dac\0\224\0\u2df6\0\u2e40"+
    "\0\u2e8a\0\u2ed4\0\224\0\u2f1e\0\u2f68\0\u2fb2\0\u2ffc\0\u3046"+
    "\0\u3090\0\u30da\0\u3124\0\u316e\0\224\0\u31b8\0\u3202\0\u324c"+
    "\0\u3296\0\u32e0\0\224\0\u332a\0\u3374\0\224\0\u33be\0\u3408"+
    "\0\u3452\0\u349c\0\u34e6\0\u3530\0\u357a\0\u35c4\0\u360e\0\224"+
    "\0\u3658\0\u36a2\0\u36ec\0\u3736\0\u3780\0\u37ca\0\u3814\0\u385e"+
    "\0\u38a8\0\224\0\u38f2\0\u393c\0\u3986\0\224";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[254];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\3\1\10"+
    "\1\11\1\12\1\13\1\14\2\3\1\15\2\3\1\10"+
    "\1\16\22\3\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\3\1\12\1\3\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\3\1\45\1\46\1\3\1\47"+
    "\1\50\3\3\1\51\1\3\1\52\2\3\105\52\1\53"+
    "\1\54\114\0\1\5\113\0\1\55\1\56\113\0\10\10"+
    "\1\0\40\10\16\0\12\10\13\0\2\12\42\0\1\12"+
    "\50\0\1\57\104\0\10\10\1\0\2\10\1\60\35\10"+
    "\16\0\7\10\1\61\2\10\11\0\5\10\1\62\2\10"+
    "\1\0\40\10\16\0\12\10\11\0\10\10\1\0\3\10"+
    "\1\63\30\10\1\64\3\10\16\0\12\10\16\0\1\65"+
    "\142\0\1\66\120\0\1\67\134\0\1\70\61\0\1\71"+
    "\2\0\1\72\30\0\1\73\54\0\1\74\127\0\1\75"+
    "\115\0\1\76\37\0\1\77\2\0\1\100\136\0\1\101"+
    "\64\0\1\102\104\0\1\103\62\0\1\104\34\0\1\105"+
    "\67\0\1\52\2\0\105\52\25\0\1\106\22\0\1\107"+
    "\1\110\40\0\1\111\1\0\1\55\1\4\1\5\107\55"+
    "\5\112\1\113\104\112\15\0\1\114\103\0\10\10\1\0"+
    "\37\10\1\115\16\0\12\10\11\0\10\10\1\0\26\10"+
    "\1\116\11\10\16\0\12\10\11\0\10\10\1\0\26\10"+
    "\1\117\11\10\16\0\12\10\11\0\10\10\1\0\25\10"+
    "\1\120\12\10\16\0\12\10\11\0\10\10\1\0\33\10"+
    "\1\121\4\10\16\0\12\10\53\0\1\122\136\0\1\123"+
    "\66\0\1\124\60\0\1\125\135\0\1\126\113\0\1\127"+
    "\140\0\1\130\60\0\1\131\64\0\1\132\113\0\1\133"+
    "\141\0\1\134\53\0\1\135\147\0\1\136\135\0\1\137"+
    "\12\0\5\112\1\140\104\112\5\113\1\141\104\113\15\0"+
    "\1\142\103\0\5\10\1\143\2\10\1\0\40\10\16\0"+
    "\12\10\11\0\5\10\1\144\2\10\1\0\40\10\16\0"+
    "\12\10\11\0\10\10\1\0\25\10\1\145\12\10\16\0"+
    "\12\10\11\0\5\10\1\146\2\10\1\0\40\10\16\0"+
    "\12\10\11\0\10\10\1\0\37\10\1\147\16\0\12\10"+
    "\24\0\1\150\111\0\1\151\146\0\1\152\53\0\1\153"+
    "\136\0\1\154\57\0\1\155\117\0\1\156\142\0\1\157"+
    "\140\0\1\160\24\0\1\161\143\0\1\162\121\0\1\163"+
    "\32\0\4\112\1\5\1\140\104\112\4\113\1\164\1\141"+
    "\104\113\16\0\1\165\102\0\10\10\1\0\27\10\1\166"+
    "\10\10\16\0\12\10\11\0\10\10\1\0\3\10\1\167"+
    "\34\10\16\0\12\10\55\0\1\170\52\0\1\171\111\0"+
    "\1\172\120\0\1\173\141\0\1\174\52\0\1\175\144\0"+
    "\1\176\60\0\1\177\152\0\1\200\51\0\1\201\101\0"+
    "\10\10\1\0\40\10\16\0\4\10\1\202\5\10\11\0"+
    "\10\10\1\0\27\10\1\203\10\10\16\0\12\10\106\0"+
    "\1\204\53\0\1\205\147\0\1\206\104\0\1\207\27\0"+
    "\1\210\113\0\1\211\107\0\1\212\2\0\1\213\17\0"+
    "\1\214\3\0\1\215\1\0\1\216\10\0\1\217\22\0"+
    "\1\220\1\0\1\221\14\0\10\10\1\0\37\10\1\222"+
    "\16\0\12\10\51\0\1\223\55\0\1\224\112\0\1\225"+
    "\116\0\1\226\135\0\1\227\65\0\1\230\111\0\1\231"+
    "\104\0\1\232\111\0\1\233\151\0\1\234\51\0\1\235"+
    "\143\0\1\236\65\0\1\237\135\0\1\240\112\0\1\241"+
    "\111\0\1\242\110\0\1\243\65\0\1\244\103\0\1\245"+
    "\112\0\1\246\202\0\1\247\24\0\1\250\136\0\1\251"+
    "\57\0\1\252\111\0\1\253\122\0\1\254\60\0\1\255"+
    "\102\0\1\256\116\0\1\257\22\0\1\260\147\0\1\261"+
    "\61\0\1\262\107\0\1\263\107\0\1\264\172\0\1\265"+
    "\56\0\1\266\117\0\1\267\54\0\1\270\202\0\1\271"+
    "\20\0\1\272\200\0\1\273\23\0\1\274\141\0\1\275"+
    "\62\0\1\276\3\0\2\276\2\0\1\277\6\0\1\276"+
    "\1\277\15\0\1\276\101\0\1\300\150\0\1\301\111\0"+
    "\1\302\44\0\1\303\65\0\1\304\121\0\1\305\1\0"+
    "\1\306\2\0\1\307\2\0\1\310\1\0\1\311\1\312"+
    "\1\313\1\0\1\314\66\0\1\315\147\0\1\316\1\0"+
    "\1\277\107\0\1\316\133\0\1\317\47\0\1\320\70\0"+
    "\1\321\142\0\1\322\66\0\1\323\114\0\1\324\114\0"+
    "\1\325\107\0\1\326\113\0\1\327\114\0\1\330\104\0"+
    "\1\331\120\0\1\332\117\0\1\333\72\0\1\334\1\335"+
    "\1\336\6\0\1\337\2\0\1\335\1\340\73\0\1\341"+
    "\116\0\1\342\103\0\1\343\135\0\1\344\71\0\1\345"+
    "\107\0\1\346\112\0\1\347\121\0\1\350\117\0\1\351"+
    "\76\0\1\352\122\0\1\353\101\0\1\354\101\0\1\355"+
    "\143\0\1\356\52\0\1\357\145\0\1\335\107\0\1\360"+
    "\67\0\1\361\133\0\1\362\72\0\1\346\114\0\1\363"+
    "\114\0\1\364\120\0\1\353\75\0\1\365\111\0\1\346"+
    "\116\0\1\366\125\0\1\367\55\0\1\370\146\0\1\371"+
    "\116\0\1\372\53\0\1\373\123\0\1\353\107\0\1\374"+
    "\112\0\1\346\107\0\1\375\130\0\1\335\116\0\1\371"+
    "\103\0\1\335\112\0\1\376\100\0\1\346\117\0\1\346"+
    "\45\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14800];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\3\1\1\11\10\1\4\11\1\1\3\11\1\1\5\11"+
    "\5\1\1\11\1\1\1\11\2\1\2\0\5\1\5\0"+
    "\1\11\2\0\2\11\7\0\4\11\3\0\5\1\1\11"+
    "\3\0\1\11\14\0\5\1\5\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\1\1\0\2\1\1\0\2\11"+
    "\5\0\1\11\1\0\2\1\3\11\1\0\1\11\11\0"+
    "\1\1\1\11\26\0\1\1\7\0\1\1\5\0\1\11"+
    "\1\0\1\11\2\0\1\1\20\0\1\11\4\0\1\11"+
    "\11\0\1\11\5\0\1\11\2\0\1\11\11\0\1\11"+
    "\11\0\1\11\3\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[254];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer string = new StringBuffer();
  
  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  MeggyJavaLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  MeggyJavaLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1958) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 39: 
          { return symbol(sym.WHILE)
          }
        case 62: break;
        case 5: 
          { return symbol(sym.INTEGER_LITERAL);
          }
        case 63: break;
        case 10: 
          { return symbol(sym.RPAREN);
          }
        case 64: break;
        case 44: 
          { return symbol(sym.IMPORT)
          }
        case 65: break;
        case 57: 
          { return symbol(sym.MEGGYSETPIXEL)
          }
        case 66: break;
        case 59: 
          { return symbol(sym.MEGGYTONESTART)
          }
        case 67: break;
        case 28: 
          { string.append('\t');
          }
        case 68: break;
        case 38: 
          { return symbol(sym.MAIN)
          }
        case 69: break;
        case 15: 
          { return symbol(sym.LT);
          }
        case 70: break;
        case 12: 
          { return symbol(sym.LBRACE);
          }
        case 71: break;
        case 20: 
          { string.setLength(0); yybegin(STRING);
          }
        case 72: break;
        case 18: 
          { return symbol(sym.LBRACKET);
          }
        case 73: break;
        case 16: 
          { return symbol(sym.NOT);
          }
        case 74: break;
        case 26: 
          { return symbol(sym.AND);
          }
        case 75: break;
        case 48: 
          { return symbol(sym.BOOLEAN)
          }
        case 76: break;
        case 42: 
          { return symbol(sym.RETURN)
          }
        case 77: break;
        case 11: 
          { return symbol(sym.ASSIGN);
          }
        case 78: break;
        case 24: 
          { return symbol(sym.IF)
          }
        case 79: break;
        case 23: 
          { string.append('\\');
          }
        case 80: break;
        case 58: 
          { return symbol(sym.COLOR_LITERAL)
          }
        case 81: break;
        case 27: 
          { string.append('\r');
          }
        case 82: break;
        case 61: 
          { return symbol(sym.MEGGYCHECKBUTTON)
          }
        case 83: break;
        case 49: 
          { return symbol(sym.TONE)
          }
        case 84: break;
        case 7: 
          { return symbol(sym.PLUS);
          }
        case 85: break;
        case 46: 
          { return symbol(sym.STRING_TYPE)
          }
        case 86: break;
        case 54: 
          { return symbol(sym.TONE_LITERAL)
          }
        case 87: break;
        case 51: 
          { return symbol(sym.MEGGYDELAY)
          }
        case 88: break;
        case 50: 
          { return symbol(sym.COLOR)
          }
        case 89: break;
        case 43: 
          { return symbol(sym.PUBLIC)
          }
        case 90: break;
        case 56: 
          { return symbol(sym.BUTTON_LITERAL)
          }
        case 91: break;
        case 53: 
          { return symbol(sym.BUTTON)
          }
        case 92: break;
        case 45: 
          { return symbol(sym.STATIC)
          }
        case 93: break;
        case 3: 
          { return symbol(sym.TIMES);
          }
        case 94: break;
        case 19: 
          { return symbol(sym.RBRACKET);
          }
        case 95: break;
        case 30: 
          { string.append('\"');
          }
        case 96: break;
        case 35: 
          { return symbol(sym.THIS)
          }
        case 97: break;
        case 4: 
          { return symbol(sym.IDENTIFIER);
          }
        case 98: break;
        case 25: 
          { return symbol(sym.EQUAL);
          }
        case 99: break;
        case 40: 
          { return symbol(sym.FALSE)
          }
        case 100: break;
        case 9: 
          { return symbol(sym.LPAREN);
          }
        case 101: break;
        case 33: 
          { return symbol(sym.ELSE)
          }
        case 102: break;
        case 13: 
          { return symbol(sym.RBRACE);
          }
        case 103: break;
        case 36: 
          { return symbol(sym.BYTE)
          }
        case 104: break;
        case 29: 
          { string.append('\n');
          }
        case 105: break;
        case 14: 
          { return symbol(sym.SEMI);
          }
        case 106: break;
        case 37: 
          { return symbol(sym.VOID)
          }
        case 107: break;
        case 8: 
          { return symbol(sym.MINUS);
          }
        case 108: break;
        case 47: 
          { return symbol(sym.EXTENDS)
          }
        case 109: break;
        case 34: 
          { return symbol(sym.TRUE)
          }
        case 110: break;
        case 21: 
          { string.append( yytext());
          }
        case 111: break;
        case 32: 
          { return symbol(sym.INT)
          }
        case 112: break;
        case 22: 
          { yybegin(YYINITIAL); return symbol(sym.STRING_LITERAL, string.toString());
          }
        case 113: break;
        case 52: 
          { return symbol(sym.MEGGY)
          }
        case 114: break;
        case 17: 
          { return symbol(sym.COMMA);
          }
        case 115: break;
        case 31: 
          { return symbol(sym.NEW)
          }
        case 116: break;
        case 60: 
          { return symbol(sym.MEGGYSETAUXLEDS)
          }
        case 117: break;
        case 41: 
          { return symbol(sym.CLASS)
          }
        case 118: break;
        case 1: 
          { throw new Error("Illegal character <" + yytext() + ">");
          }
        case 119: break;
        case 55: 
          { return symbol(sym.MEGGYGETPIXEL)
          }
        case 120: break;
        case 6: 
          { return symbol(sym.DOT);
          }
        case 121: break;
        case 2: 
          { 
          }
        case 122: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {   return sym.EOF;
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
